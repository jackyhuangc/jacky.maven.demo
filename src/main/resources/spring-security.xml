<?xml version="1.0" encoding="UTF-8"?>
<!-- <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security" xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security-4.2.xsd"> 
	Spring-Security 的配置 注意开启use-expressions.表示开启表达式. see:http://www.family168.com/tutorial/springsecurity3/html/el-access.html 
	<security:http auto-config="true" use-expressions="true"> <security:intercept-url 
	pattern="/auth/login" access="permitAll" /> <security:intercept-url pattern="/main/admin" 
	access="hasRole('ROLE_ADMIN')" /> <security:intercept-url pattern="/main/common" 
	access="hasRole('ROLE_USER')" /> <security:form-login login-page="/auth/login" 
	authentication-failure-url="/auth/login?error=true" default-target-url="/main/common" 
	/> <security:logout invalidate-session="true" logout-success-url="/auth/login" 
	logout-url="/auth/logout" /> 必须添加此段声明，禁用CSRF功能 <security:csrf disabled="false" 
	/> </security:http> 指定一个自定义的authentication-manager :customUserDetailsService 
	<security:authentication-manager> <security:authentication-provider user-service-ref="customUserDetailsService"> 
	<security:password-encoder ref="passwordEncoder" /> </security:authentication-provider> 
	</security:authentication-manager> 对密码进行MD5编码 <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" 
	id="passwordEncoder" /> <bean class="com.xujj.MyMd5PasswordEncoder" id="passwordEncoder" 
	/> 通过 customUserDetailsService,Spring会自动的用户的访问级别. 也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联. 
	<bean id="customUserDetailsService" class="com.xujj.MyUserDetailsService" 
	/> </beans> -->

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
          http://www.springframework.org/schema/beans/spring-beans.xsd  
          http://www.springframework.org/schema/context  
          http://www.springframework.org/schema/context/spring-context.xsd  
          http://www.springframework.org/schema/security  
              http://www.springframework.org/schema/security/spring-security.xsd">

	<context:component-scan base-package="com.framework.security" />

	<!-- 静态资源，不用权限，不需要拦截 -->
	<http pattern="/js/**" security="none" />
	<http pattern="/css/**" security="none" />
	<http pattern="/images/**" security="none" />
	<http pattern="/fonts/**" security="none" />
	<http pattern="/*.ico" security="none" />

	<http use-expressions="false">
		<!-- IS_AUTHENTICATED_ANONYMOUSLY 匿名登录 -->
		<intercept-url pattern="/auth/login" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/error/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<!-- 需要权限登录的URL -->
		<intercept-url pattern="/**" access="ROLE_ADMIN" />

		<form-login login-processing-url="/j_spring_security_check"
			login-page="/auth/login" username-parameter="username"
			password-parameter="password" default-target-url="/"
			always-use-default-target='true' authentication-failure-url="/auth/login?error=1" />
		<!-- 暂不使用此属性，只会转发，不刷新地址栏，不利于操作 authentication-success-forward-url="/main/admin" -->
		<logout invalidate-session="true" logout-url="/auth/logout"
			logout-success-url="/auth/login" delete-cookies="JSESSIONID,SESSION" />
		<http-basic />
		<headers>
			<frame-options disabled="true"></frame-options>
		</headers>

		<csrf token-repository-ref="csrfTokenRepository" />

		<session-management invalid-session-url="/auth/login"
			session-authentication-error-url="/error/session">
			<!-- max-sessions只容许一个账号登录，error-if-maximum-exceeded 后面账号登录后踢出前一个账号，expired-url 
				session过期跳转界面 -->
			<!-- <concurrency-control max-sessions="1" error-if-maximum-exceeded="false" 
				expired-url="/frame.expired" session-registry-ref="sessionRegistry" /> -->
		</session-management>

		<expression-handler ref="webexpressionHandler"></expression-handler>
	</http>

	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

	<beans:bean id="userDetailsService"
		class="com.jacky.utils.security.MyUserDetailsService" />

	<!--配置web端使用权限控制，用于hasPermission，以增加自定义的投票器 ， Spring Security为我们定义了hasPermission的两种使用方式，它们分别对应着PermissionEvaluator的两个不同的hasPermission()方法。Spring 
		Security默认处理Web、方法的表达式处理器分别为DefaultWebSecurityExpressionHandler和DefaultMethodSecurityExpressionHandler，它们都继承自AbstractSecurityExpressionHandler -->
	<beans:bean id="webexpressionHandler"
		class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />

	<authentication-manager>
		<authentication-provider ref="authenticationProvider" />
	</authentication-manager>

	<!-- 自定义userDetailsService， 盐值加密 -->
	<beans:bean id="authenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="hideUserNotFoundExceptions"
			value="true" />
		<beans:property name="userDetailsService" ref="userDetailsService" />
		<beans:property name="passwordEncoder" ref="passwordEncoder" />
		<!-- <beans:property name="saltSource" ref="saltSource" /> -->
	</beans:bean>

	<!-- Md5加密 -->
	<beans:bean id="passwordEncoder"
		class="com.jacky.utils.security.MyMd5PasswordEncoder" />

	<!-- 盐值加密 salt对应数据库字段 <beans:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource"> 
		<beans:property name="userPropertyToUse" value="salt" /> </beans:bean> -->

	<!-- 把token放到session中来存取 -->
	<beans:bean id="csrfTokenRepository"
		class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />
</beans:beans>  
